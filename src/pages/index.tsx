import { AccountBarDropdown } from "@/components/AccountDropdown"
import { ChatHistory, type Message } from "@/components/ChatHistory"
import { Textarea } from "@/components/ui/TextArea"
import { env } from "@/env.mjs"
import { useIsClient } from "@/hooks/useIsClient"
import { trpc, type RouterInputs, type RouterOutputs } from "@/utils/api"
import { useSession } from "next-auth/react"
import Head from "next/head"
import { useRouter } from "next/navigation"
import Script from "next/script"
import Pusher from "pusher-js"
import { useEffect, useState } from "react"

type SendMessageInput = RouterInputs["messages"]["send"]

function AccountBar() {
  return (
    <div
      className={`flex min-w-[75px] flex-col items-center gap-4 bg-gray-200`}
    >
      <AccountBarDropdown />
    </div>
  )
}

function FriendsBar() {
  return null
}

function ChatRoom() {
  const session = useSession()
  const router = useRouter()
  const isClient = useIsClient()
  const { mutate } = trpc.messages.send.useMutation()
  const { data } = trpc.messages.getByChannel.useQuery(
    {
      channel: "hello-channel",
    },
    { refetchOnWindowFocus: false }
  )

  const [messages, setMessages] = useState<Message[]>([])

  useEffect(() => {
    if (data) {
      setMessages(
        transformServerMessagesToClient(session.data?.user.email ?? null, data)
      )
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [JSON.stringify(data)])

  useEffect(() => {
    const pusher = new Pusher(env.NEXT_PUBLIC_PUSHER_KEY, {
      cluster: env.NEXT_PUBLIC_PUSHER_CLUSTER,
    })
    const channel = pusher.subscribe("hello-channel")
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const callback = (data: any) => {
      console.log("recieved data from friend!", data)
    }
    channel.bind("message", callback)
    return () => {
      channel.unbind("message", callback)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [session.data?.user.id])

  if (isClient && !session?.data) {
    void router.push("/signup")
  }

  function sendMesage({ ...input }: SendMessageInput) {
    mutate({
      ...input,
    })
  }

  function transformServerMessagesToClient(
    userEmail: string | null,
    data?: RouterOutputs["messages"]["getByChannel"]
  ): Message[] {
    if (!data) return []
    return data.map((message) => ({
      from: message.from,
      timestamp: message.timestamp,
      type: message.type,
      content: message.content,
    }))
  }

  return (
    <>
      <div className="flex flex-1 flex-col bg-gray-100">
        <div className="flex flex-1 flex-col">
          <ChatHistory messages={messages} />
        </div>
        <div className="m-2 flex h-24 bg-gray-500">
          <ChatInput sendMesage={sendMesage} />
        </div>
      </div>
    </>
  )
}

function ChatInput({
  sendMesage,
}: {
  sendMesage: (message: SendMessageInput) => void
}) {
  const session = useSession()
  const [newMessage, setNewMessage] = useState("")

  return (
    <Textarea
      className="h-full bg-gray-50 p-4"
      style={{ resize: "none" }}
      placeholder="Write a message"
      value={newMessage}
      onChange={(e) => {
        setNewMessage(e.target.value)
      }}
      onKeyUp={(e) => {
        if (e.key === "Enter") {
          sendMesage({
            from:
              session.data?.user.email === "abdulqshabbir@gmail.com"
                ? "4f8266a3-cc5a-4979-b8a9-9e970b2b7801"
                : "0f041948-280b-4004-b81f-89ece48da5ab",
            to:
              session.data?.user.email === "ashabbir@algomau.ca"
                ? "4f8266a3-cc5a-4979-b8a9-9e970b2b7801"
                : "0f041948-280b-4004-b81f-89ece48da5ab",
            channel: "hello-channel",
            content: newMessage.trimEnd(),
          })
          setNewMessage("")
        }
      }}
    />
  )
}

export default function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Script src="https://js.pusher.com/8.2.0/pusher.min.js" />
      <main className="flex min-h-screen flex-row">
        <AccountBar />
        <FriendsBar />
        <ChatRoom />
      </main>
    </>
  )
}
