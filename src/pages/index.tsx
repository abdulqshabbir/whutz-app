import { AccountBarDropdown } from "@/components/AccountDropdown"
import { ChatHistory, type Message } from "@/components/ChatHistory"
import { Textarea } from "@/components/ui/TextArea"
import { env } from "@/env.mjs"
import { useIsClient } from "@/hooks/useIsClient"
import { trpc, type RouterInputs } from "@/utils/api"
import { atom, useAtom } from "jotai"
import { useSession } from "next-auth/react"
import Head from "next/head"
import { useRouter } from "next/navigation"
import Script from "next/script"
import Pusher from "pusher-js"
import { useEffect, useState } from "react"

export const friendEmailAtom = atom("")
export const channelAtom = atom("")
export const messagesAtom = atom<Message[]>([])

type SendMessageInput = RouterInputs["messages"]["send"]

function AccountBar() {
  return (
    <div
      className={`flex min-w-[75px] flex-col items-center gap-4 bg-gray-200`}
    >
      <AccountBarDropdown />
    </div>
  )
}

function FriendsBar() {
  return null
}

function ChatRoom() {
  const session = useSession()
  const router = useRouter()
  const isClient = useIsClient()
  const { mutate } = trpc.messages.send.useMutation()
  const [messages, setMessages] = useAtom(messagesAtom)
  const [channel] = useAtom(channelAtom)

  const { data: initialMessages } = trpc.messages.getByChannel.useQuery(
    {
      channel,
    },
    { enabled: Boolean(channel) }
  )

  useEffect(() => {
    const pusher = new Pusher(env.NEXT_PUBLIC_PUSHER_KEY, {
      cluster: env.NEXT_PUBLIC_PUSHER_CLUSTER,
    })
    const pusherChannel = pusher.subscribe(channel)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const callback = ({ data }: { data: Message[] }) => {
      setMessages(data)
    }
    pusherChannel.bind("message", callback)
    return () => {
      pusherChannel.unbind("message", callback)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [session.data?.user.id, channel])

  if (isClient && !session?.data) {
    void router.push("/signup")
  }

  function sendMesage({ ...input }: SendMessageInput) {
    mutate({
      ...input,
    })
  }
  const CHAT_INPUT_HEIGHT_IN_PIXELS = 150

  if (!channel) {
    return null
  }

  return (
    <>
      <div className="flex w-full flex-col items-stretch bg-gray-100">
        <div
          className={`flex h-[calc(100vh-1rem-${CHAT_INPUT_HEIGHT_IN_PIXELS}px)] flex-col overflow-y-scroll`}
        >
          <ChatHistory
            messages={messages.length === 0 ? initialMessages ?? [] : messages}
          />
        </div>
        <div
          className={`m-2 flex h-[${CHAT_INPUT_HEIGHT_IN_PIXELS}px] bg-gray-500"`}
        >
          <ChatInput sendMesage={sendMesage} />
        </div>
      </div>
    </>
  )
}

function ChatInput({
  sendMesage,
}: {
  sendMesage: (message: SendMessageInput) => void
}) {
  const session = useSession()
  const [newMessage, setNewMessage] = useState("")
  const [friendEmail] = useAtom(friendEmailAtom)
  const [channel] = useAtom(channelAtom)

  return (
    <Textarea
      className="m-0 h-full bg-gray-50 p-4"
      style={{ resize: "none" }}
      placeholder="Write a message"
      value={newMessage}
      onChange={(e) => {
        setNewMessage(e.target.value)
      }}
      onKeyUp={(e) => {
        if (e.key === "Enter") {
          if (session.data?.user.email) {
            sendMesage({
              fromEmail: session.data?.user.email,
              toEmail: friendEmail,
              channel: channel,
              content: newMessage.trimEnd(),
            })
            setNewMessage("")
          }
        }
      }}
    />
  )
}

export default function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Script src="https://js.pusher.com/8.2.0/pusher.min.js" />
      <main className="flex min-h-screen flex-row">
        <AccountBar />
        <FriendsBar />
        <ChatRoom />
      </main>
    </>
  )
}
